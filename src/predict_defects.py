# src/predict_defects.py

import os
from ultralytics import YOLO

# Define constants
# Path to the best model weights, generated by train_model.py
MODEL_PATH = 'runs/detect/pcb_detection_run/weights/best.pt' 
# Path to the image(s) you want to test
SOURCE_PATH = 'data/images/test' 

def predict():
    """
    Loads the trained model and performs defect prediction on test images.
    """
    if not os.path.exists(MODEL_PATH):
        print(f"Error: Trained model weights not found at {MODEL_PATH}.")
        print("Please ensure training was completed successfully and the path is correct.")
        return

    print(f"Loading trained model from: {MODEL_PATH}")
    # Load the custom trained model
    model = YOLO(MODEL_PATH) 

    print(f"Running prediction on images in: {SOURCE_PATH}")
    
    # Run inference on the source path
    results = model.predict(
        source=SOURCE_PATH, 
        save=True, 
        conf=0.5, # Only show predictions with >50% confidence
        name='pcb_predictions'
    )

    # Display results
    print("\n--- Prediction Summary ---")
    try:
        class_names = model.names
    except AttributeError:
        class_names = {i: f'Class_{i}' for i in range(6)}
        
    for result in results:
        print(f"Image: {os.path.basename(result.path)}")
        num_defects = len(result.boxes)
        
        if num_defects > 0:
            print(f"  -> Detected {num_defects} defects.")
            for box in result.boxes:
                class_name = class_names.get(int(box.cls[0]), 'Unknown')
                confidence = float(box.conf[0])
                print(f"     - Defect Type: {class_name}, Confidence: {confidence:.2f}")
        else:
            print("  -> No defects detected (or below confidence threshold).")
            
    print("\nVisual results (images with boxes) are saved in the 'runs/detect/pcb_predictions' directory.")

if __name__ == '__main__':
    predict()